package com.aftermath.web.servlet;

import com.aftermath.pojo.Course;
import com.aftermath.pojo.Student;
import com.aftermath.service.StudentCourseService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

@WebServlet(name = "ServletStudentCourse", urlPatterns = {"/student/course"})
public class StudentCourseServlet extends HttpServlet {

    private final StudentCourseService service = new StudentCourseService();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String target = req.getParameter("action");
        if ("course".equals(target)) {
            HttpSession session = req.getSession();
            Student student = (Student) session.getAttribute("student");
            // 查询课程信息
            List<Course> courses = service.queryCourse(student.getId());

            // 进行分页处理
            int pageSize = 5; //每页显示5条记录
            int totalPage = (int) Math.ceil(courses.size() / (double) pageSize); // 查询结果总共需要显示多少页
            int page = 1; // 默认显示第一页
            if (req.getParameter("page") != null) {
                page = Integer.parseInt(req.getParameter("page")); // 根据请求参数获取当前页码，如果没有则默认显示第一页
            }
            int startRow = (page - 1) * pageSize; // 计算每一页的起始行数
            int endRow = Math.min(startRow + pageSize, courses.size()); // 计算每一页的结束行数
            List<Course> pageCourses = courses.subList(startRow, endRow); // 截取当前页的记录

            String html = generatePageHtml(pageCourses, totalPage, page, req);

            req.setAttribute("courses", pageCourses);
            req.setAttribute("pageHtml", html);
            req.getRequestDispatcher("/student_menu.jsp").forward(req, resp);
        } else {
            resp.setContentType("text/html;charset=utf-8");
            PrintWriter out = resp.getWriter();
            out.println("<h1>查询失败！</h1>");
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        this.doGet(req, resp);
    }

    private String generatePageHtml(List<Course> pageCourses, int totalPage, int page, HttpServletRequest req) {
        StringBuilder html = new StringBuilder();

        html.append("""
            <table border="1">
                <thead>
                    <tr>
                        <th>课程编号</th>
                        <th>课程名称</th>
                        <th>学分</th>
                        <th>学期</th>
                        <th>开课年份</th>
                        <th>备注</th>
                    </tr>
                </thead>
                <tbody>
            """);
        for (Course course : pageCourses) {
            html.append("""
                <tr>
                    <td>%s</td>
                    <td>%s</td>
                    <td>%d</td>
                    <td>%s</td>
                    <td>%s</td>
                    <td>%s</td>
                </tr>
                """.formatted(
                    course.getId(),
                    course.getName(),
                    course.getCredits(),
                    course.getSemester(),
                    course.getBeginYear(),
                    course.getNotes()
            ));
        }
        html.append("</tbody>\n");
        html.append("</table>\n");

        // 添加分页标记
        String contextPath = req.getContextPath();
        html.append("<div>");
        for (int i = 1; i <= totalPage; i++) {
            if (i == page) {
                html.append("<span>").append(i).append("</span>&nbsp;");
            } else {
                html.append("<a href=")
                        .append(contextPath)
                        .append("/student/course?action=course&page=")
                        .append(i)
                        .append(">")
                        .append(i)
                        .append("</a>&nbsp;");
            }
        }
        html.append("</div>");

        return html.toString();
    }
}

<ul>
        <li><a href="<c:url value="/student/course?action=course"/>">分页查询课程信息</a></li>
        <!-- 其他菜单项 -->
    </ul>
    <hr/>
    <c:if test="${not empty courses}">
        <table border="1">
            <thead>
            <tr>
                <th>课程编号</th>
                <th>课程名称</th>
                <th>学分</th>
                <th>学期</th>
                <th>开课年份</th>
                <th>备注</th>
            </tr>
            </thead>
            <tbody>
            <c:forEach items="${courses}" var="course">
                <tr>
                    <td><c:out value="${course.id}"/></td>
                    <td><c:out value="${course.name}"/></td>
                    <td><c:out value="${course.credits}"/></td>
                    <td><c:out value="${course.semester}"/></td>
                    <td><c:out value="${course.beginYear}"/></td>
                    <td><c:out value="${course.notes}"/></td>
                </tr>
            </c:forEach>
            </tbody>
        </table>
    </c:if>

    <!-- 引入jQuery库 -->
    <script src="${context_path}/webjars/jquery/3.6.2/jquery.min.js"></script>

    <!-- Javascript代码 -->
    <script>
        // 获取所有选项，并添加事件监听
        let options = document.querySelectorAll(".nav-container li");
        options.forEach((option) => {
            option.addEventListener("click", () => {
                // 获取选中的目标名称
                // 在选中的选项上添加active样式
                options.forEach((option) => {
                    option.classList.remove("active");
                });
                option.classList.add("active");
                let target = option.getAttribute("data-target");
                getContent(target);
            });
        });

        // getContent函数，根据目标名称执行不同的操作
        function getContent(target) {
            switch (target) {
                case "choose":
                    sentRequest("/AcademicAffairsApprovalSystem_war/student/choose", target);
                    break;
                case "course":
                    sentRequest("/AcademicAffairsApprovalSystem_war/student/course", target);
                    break;
                case "approving":
                    sentRequest("/AcademicAffairsApprovalSystem_war/student/approving", target);
                    break;
                default:
                    window.alert("参数错误");
            }
        }

        // sentRequest函数，向后端发送Ajax请求，获取响应数据并插入到.content元素中
        function sentRequest(url, target) {
            $.ajax({
                url: url,
                type: "POST",
                data: {action: target},
                dataType: "html",
                success: function (response) {
                    $(".content").html(response);
                },
                error: function (xhr, status, error) {
                    $(".content").html("<p>请求出错</p>");
                },
            });
        }
    </script>

    </body>
    </html>

boolean allDone = true;
            Enumeration<String> parameterNames = req.getParameterNames();
            while (parameterNames.hasMoreElements()) {
                String parameterName = parameterNames.nextElement();
                if (parameterName.startsWith("course_")) {
                    String[] parts = parameterName.split("_");
                    String courseId = parts[1];
                    String studentId = parts[2];
                    String value = req.getParameter(parameterName);
                    if ("agree".equals(value)) {
                        // 同意选课申请
                        service.pass(studentId, courseId);
                    } else if ("reject".equals(value)) {
                        // 驳回选课申请
                        service.reject(studentId, courseId);
                    }

                    // 检查选课记录的审批状态是否全部更新
                    Boolean status = service.queryStatus(studentId, courseId);
                    if (status == null) {
                        allDone = false;
                    }
                }
            }

            if (allDone) {
                // 所有选课记录的审批状态都已经更新，返回处理结果
                // TODO 返回处理结果
                doGet(req, resp);
            }

            <div>
                    <label for="course_id">课程编号：</label>
                    <input type="text" required id="course_id" name="course_id">
                  </div>
                  <div>
                    <label for="course_name">课程名：</label>
                    <input type="text" required id="course_name" name="course_name">
                  </div>
                  <div>
                    <label for="credits">学分：</label>
                    <input type="text" required id="credits" name="credits">
                  </div>
                  <div>
                    <label for="begin_year">开课年份：</label>
                    <input type="text" required id="begin_year" name="begin_year">
                  </div>
                  <div>
                    <label for="semester">学期：</label>
                    <input type="text" required id="semester" name="semester">
                  </div>
                  <div>
                    <label for="notes">备注：</label>
                    <input type="text" required id="notes" name="notes">
                  </div>
                  <input type="hidden" name="action" value="choose">
                  <div class="ui-button">
                    <button type="submit" onclick="return validate_course()">提交</button>
                  </div>

                  String target = req.getParameter("action");
                          if ("approving".equals(target)) {
                              HttpSession session = req.getSession();
                              Student student = (Student) session.getAttribute("user");
                              // 查询课程信息
                              List<Approval> approvals = service.queryAllApproval(student.getId());
                              System.out.println(approvals);

                              // 进行分页处理
                              int pageSize = 5; //每页显示5条记录
                              int totalPage = (int) Math.ceil(approvals.size() / (double) pageSize); // 查询结果总共需要显示多少页
                              int page = 1; // 默认显示第一页
                              if (req.getParameter("page") != null) {
                                  page = Integer.parseInt(req.getParameter("page")); // 根据请求参数获取当前页码，如果没有则默认显示第一页
                              }
                              int startRow = (page - 1) * pageSize; // 计算每一页的起始行数
                              int endRow = Math.min(startRow + pageSize, approvals.size()); // 计算每一页的结束行数
                              List<Approval> pageApprovals = approvals.subList(startRow, endRow); // 截取当前页的记录

                              req.setAttribute("total_page", totalPage);
                              req.setAttribute("page", page);
                              req.setAttribute("courses_approving", pageApprovals);
                              req.setAttribute("action", target);
                              req.getRequestDispatcher("/student_menu.jsp").forward(req, resp);
                          } else {
                              resp.setContentType("text/html;charset=utf-8");
                              PrintWriter out = resp.getWriter();
                              out.println("<h1>查询失败！</h1>");
                          }、
<div>
                <label for="student_name">学生名：</label>
                <input type="text" id="student_name" name="input_student_name">
            </div>